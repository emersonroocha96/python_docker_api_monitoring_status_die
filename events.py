
### C√≥digo Comentado para Monitoramento de Containers

# -*- coding: utf-8 -*-

"""
Script de Monitoramento de Eventos Docker

Este script se conecta √† API do Docker para monitorar eventos em tempo real.
Ele filtra especificamente por eventos 'die' (quando um container para/morre)
e envia uma notifica√ß√£o formatada para um webhook do Discord.
"""

# --- 1. Importa√ß√£o de Depend√™ncias ---
# Importamos as bibliotecas (toolkits) que usaremos no script.
import docker        # A biblioteca oficial do Docker para Python. Usada para se conectar ao daemon e ouvir eventos.
import datetime      # Usada para converter o timestamp do evento (um n√∫mero) em uma data e hora leg√≠veis.
import requests      # Usada para realizar requisi√ß√µes HTTP, especificamente para enviar a notifica√ß√£o (POST) ao Discord.


# --- 2. Configura√ß√£o Inicial ---

# Inicializa o cliente Docker.
# docker.from_env() √© o m√©todo preferido. Ele localiza automaticamente como se
# conectar ao daemon do Docker (seja via socket no Linux/macOS ou 
# named pipe no Windows) usando vari√°veis de ambiente padr√£o.
# √â mais robusto e port√°vel do que fixar um IP/porta como 'tcp://127.0.0.1:2375'.
client = docker.from_env()

# Define a URL do webhook do Discord para onde as notifica√ß√µes ser√£o enviadas.
# IMPORTANTE: Mantenha esta URL em segredo, pois qualquer um com ela pode enviar mensagens para o seu canal.
webhook_url = "https://discord.com/api/webhooks/1433598870704881725/Kx-3QZM9LF2umXYm4rnt8ZTcDtAyD764LeFZ2IRsfNO57mNcDknHJ8DTAkwHbLJddEj7"

# Imprime uma mensagem no console para indicar que o script foi iniciado
# e est√° na fase de monitoramento. √â uma boa pr√°tica de logging.
print("Monitorando eventos 'DIE' do docker...")


# --- 3. Loop Principal de Monitoramento ---

# Inicia o loop principal de escuta. Isso cria um "stream" de eventos do Docker.
# O script ficar√° "preso" aqui, esperando novos eventos chegarem.
#
# - client.events(): Conecta ao stream de eventos do Docker daemon.
# - decode=True: Garante que os eventos (que v√™m como bytes JSON) sejam
#   automaticamente decodificados para dicion√°rios Python, facilitando o acesso.
# - filters={"event": "die"}: √â o filtro crucial. Dizemos ao Docker para nos
#   enviar *apenas* eventos do tipo 'die', ignorando 'start', 'create', 'pull', etc.
for event in client.events(decode=True, filters={"event": "die"}):
    
    # --- 4. Tratamento de Eventos e Exce√ß√µes ---
    
    # Inicia um bloco 'try...except'. Isso √© uma pr√°tica de programa√ß√£o defensiva.
    # Se um evento chegar malformado ou uma chave esperada n√£o existir
    # (ex: um container sem nome), o script n√£o ir√° "quebrar" e parar.
    # Ele apenas registrar√° o erro e continuar√° monitorando o pr√≥ximo evento.
    try:
        # --- 5. Extra√ß√£o e Formata√ß√£o de Dados ---
        
        # O 'event' √© um dicion√°rio Python. Acessamos seus dados usando chaves.
        container_id = event["id"]
        
        # O nome do container fica aninhado dentro de "Actor" -> "Attributes"
        container_name = event["Actor"]["Attributes"]["name"]
        
        # O 'time' do evento vem no formato "Epoch" (ou Unix Timestamp),
        # que √© o n√∫mero de segundos desde 1¬∫ de janeiro de 1970.
        epoch_time = event["time"]
        
        # Convertemos o timestamp Epoch em um objeto datetime leg√≠vel.
        # Em seguida, formatamos (strftime) para o padr√£o "Ano-M√™s-Dia Hora:Minuto:Segundo".
        # (CORRE√á√ÉO: O seu c√≥digo original usava %Y-%M-%D, que est√° incorreto.
        # %M √© Minuto e %D √© o formato americano mm/dd/yy. O correto √© %Y-%m-%d).
        date_time = datetime.datetime.fromtimestamp(epoch_time).strftime('%Y-%m-%d %H:%M:%S')

        # --- 6. Montagem do Payload para o Discord ---
        
        # Montamos o dicion√°rio (payload) que ser√° enviado ao Discord.
        # O Discord espera um JSON que tenha uma chave principal chamada "content".
        # Usamos f-strings (ou %s como no seu original) para formatar a mensagem
        # de forma din√¢mica, inserindo as vari√°veis que coletamos.
        # `container_id[:12]` pega apenas os 12 primeiros caracteres do ID (a vers√£o curta).
        payload = {
            "content": f"üö® **Container Parou!**\nO container `{container_name}` ({container_id[:12]}) foi finalizado √†s {date_time}"
        }

        # Imprime no console local o que ser√° enviado.
        print(f"Evento Detectado: {payload}")

        # --- 7. Envio da Notifica√ß√£o ---
        
        # Usa a biblioteca 'requests' para enviar a notifica√ß√£o.
        # - requests.post(): Realiza uma requisi√ß√£o HTTP do tipo POST.
        # - webhook_url: O destino da requisi√ß√£o.
        # - json=payload: (CORRE√á√ÉO: Seu c√≥digo original usava data=payload).
        #   Usar `json=payload` √© o m√©todo correto e mais robusto.
        #   A biblioteca 'requests' automaticamente converte o dicion√°rio Python
        #   em uma string JSON e, crucialmente, define o cabe√ßalho
        #   'Content-Type' como 'application/json', que √© o que o Discord espera.
        response = requests.post(webhook_url, json=payload)

        # --- 8. Verifica√ß√£o de Erro no Envio ---
        
        # Verifica o c√≥digo de status HTTP da resposta do Discord.
        # C√≥digos 2xx (como 200 ou 204) significam sucesso.
        # C√≥digos 4xx (como 404 - n√£o encontrado) ou 5xx (erro de servidor)
        # indicam que a notifica√ß√£o falhou (ex: URL do webhook errada, rate limit).
        if response.status_code >= 400:
            print(f"Erro ao enviar dados para o Discord: {response.status_code} - {response.text}")

    # Este √© o bloco 'except' do 'try' l√° de cima.
    # Se qualquer linha dentro do 'try' falhar, o c√≥digo pula para c√°.
    # 'Exception as e' captura o erro na vari√°vel 'e' e o imprime no console.
    except Exception as e:
        print(f"Erro ao processar evento: {e}")
        # O loop 'for' continua, esperando o pr√≥ximo evento.
